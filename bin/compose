#!/bin/bash
set -eu -o pipefail

#docker_compose_service_names() {
#  if which -s yq && find . -maxdepth 1 -name 'docker-compose.*' -or -name 'compose.*' > /dev/null; then
#    compose_yaml=$(find . -maxdepth 1 -name 'docker-compose.*' -or -name 'compose.*' | head -n 1)
#    test -r "$compose_yaml" && cat "$compose_yaml" | yq -r '.services | keys | .[]'
#  else
#    docker compose ps --format '{{.Service}}' 2>/dev/null
#  fi
#}

run_docker_compose_command() {
    local cmd="docker compose $@"
    test -n "${DEBUG-}" && echo '#' "$cmd" >&2
    eval "$cmd"
}

docker_compose_prune() {
    run_docker_compose_command stop "$@"
    run_docker_compose_command down --rmi local --remove-orphans --volumes "$@"
}

docker_compose_recreate() {
    docker_compose_prune "$@"
    run_docker_compose_command create --build "$@"
    run_docker_compose_command start "$@"
    run_docker_compose_command logs "$@"
}

declare -A command_table=(
    ["recreate"]="docker_compose_recreate"
    ["prune"]="docker_compose_prune"
)

command=''
args="${@@Q}"
if [ -n "${command_table[$1]-}" ]; then
    command="$1"
    args=${@:2}
fi

test -n "${DEBUG-}" && echo '#' "\$@ =>" "${@@Q}" >&2
test -n "${DEBUG-}" && echo '#' "command => = '$command'" >&2
test -n "${DEBUG-}" && echo '#' "args =>" ${args[@]} >&2

if [ -n "$command" ]; then
    "${command_table[$command]}" ${args[@]}
else
    run_docker_compose_command ${args[@]}
fi
